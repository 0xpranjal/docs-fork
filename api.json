{
  "openapi": "3.0.0",
  "paths": {
    "/call": {
      "get": {
        "operationId": "CallController_findAll",
        "summary": "List Calls",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Call" }
                }
              }
            }
          }
        },
        "tags": ["Calls"],
        "security": [{ "bearer": [] }]
      }
    },
    "/call/{id}": {
      "get": {
        "operationId": "CallController_findOne",
        "summary": "Get Call",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Call" }
              }
            }
          }
        },
        "tags": ["Calls"],
        "security": [{ "bearer": [] }]
      }
    },
    "/call/phone": {
      "post": {
        "operationId": "CallController_createPhoneCall",
        "summary": "Create Phone Call",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateOutboundCallDTO" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Call" }
              }
            }
          }
        },
        "tags": ["Calls"],
        "security": [{ "bearer": [] }]
      }
    },
    "/call/web": {
      "post": {
        "operationId": "CallController_createWebCall",
        "summary": "Create Web Call",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateWebCallDTO" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Call" }
              }
            }
          }
        },
        "tags": ["Calls"],
        "security": [{ "bearer": [] }]
      }
    },
    "/assistant": {
      "post": {
        "operationId": "AssistantController_create",
        "summary": "Create Assistant",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateAssistantDTO" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Assistant" }
              }
            }
          }
        },
        "tags": ["Assistants"],
        "security": [{ "bearer": [] }]
      },
      "get": {
        "operationId": "AssistantController_findAll",
        "summary": "List Assistants",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Assistant" }
                }
              }
            }
          }
        },
        "tags": ["Assistants"],
        "security": [{ "bearer": [] }]
      }
    },
    "/assistant/{id}": {
      "get": {
        "operationId": "AssistantController_findOne",
        "summary": "Get Assistant",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Assistant" }
              }
            }
          }
        },
        "tags": ["Assistants"],
        "security": [{ "bearer": [] }]
      },
      "patch": {
        "operationId": "AssistantController_update",
        "summary": "Update Assistant",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateAssistantDTO" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Assistant" }
              }
            }
          }
        },
        "tags": ["Assistants"],
        "security": [{ "bearer": [] }]
      },
      "delete": {
        "operationId": "AssistantController_remove",
        "summary": "Delete Assistant",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Assistant" }
              }
            }
          }
        },
        "tags": ["Assistants"],
        "security": [{ "bearer": [] }]
      }
    },
    "/phone-number/buy": {
      "post": {
        "operationId": "PhoneNumberController_buy",
        "summary": "Buy Phone Number",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/BuyPhoneNumberDTO" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PhoneNumber" }
              }
            }
          }
        },
        "tags": ["Phone Numbers"],
        "security": [{ "bearer": [] }]
      }
    },
    "/phone-number/import": {
      "post": {
        "operationId": "PhoneNumberController_import",
        "summary": "Import Twilio Number",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportTwilioPhoneNumberDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PhoneNumber" }
              }
            }
          }
        },
        "tags": ["Phone Numbers"],
        "security": [{ "bearer": [] }]
      }
    },
    "/phone-number": {
      "get": {
        "operationId": "PhoneNumberController_findAll",
        "summary": "List Phone Numbers",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/PhoneNumber" }
                }
              }
            }
          }
        },
        "tags": ["Phone Numbers"],
        "security": [{ "bearer": [] }]
      }
    },
    "/phone-number/{id}": {
      "get": {
        "operationId": "PhoneNumberController_findOne",
        "summary": "Get Phone Number",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PhoneNumber" }
              }
            }
          }
        },
        "tags": ["Phone Numbers"],
        "security": [{ "bearer": [] }]
      },
      "patch": {
        "operationId": "PhoneNumberController_update",
        "summary": "Update Phone Number",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdatePhoneNumberDTO" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PhoneNumber" }
              }
            }
          }
        },
        "tags": ["Phone Numbers"],
        "security": [{ "bearer": [] }]
      },
      "delete": {
        "operationId": "PhoneNumberController_remove",
        "summary": "Delete Phone Number",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["Phone Numbers"],
        "security": [{ "bearer": [] }]
      }
    }
  },
  "info": {
    "title": "Vapi API",
    "description": "API for building voice assistants",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [{ "url": "https://api.vapi.ai" }],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "Bearer",
        "type": "http",
        "description": "Retrieve your key from the [dashboard](https://dashboard.vapi.ai)."
      }
    },
    "schemas": {
      "OpenAIFunctionParameterProperty": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "enum": ["string", "number", "boolean"] },
          "enum": { "type": "array", "items": { "type": "string" } },
          "description": { "type": "string" }
        },
        "required": ["type"]
      },
      "OpenAIFunctionParameters": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "enum": ["object"] },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/OpenAIFunctionParameterProperty"
            }
          },
          "required": { "type": "array", "items": { "type": "string" } }
        },
        "required": ["type", "properties"]
      },
      "OpenAIFunction": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "This is the the name of the function to be called.\n\nMust be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.",
            "maxLength": 64
          },
          "async": {
            "type": "boolean",
            "description": "Setting async: true will cause the function to be called asynchronously, meaning that the Assistant will not wait for the function to return before continuing."
          },
          "description": {
            "type": "string",
            "description": "This is the description of what the function does, used by the AI to choose when and how to call the function."
          },
          "parameters": {
            "description": "These are the parameters the functions accepts, described as a JSON Schema object.\n\nSee the [OpenAI guide](https://platform.openai.com/docs/guides/gpt/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema) for documentation about the format.\n\nTo describe a function that accepts no parameters, provide the value {\"type\": \"object\", \"properties\": {}}.",
            "allOf": [
              { "$ref": "#/components/schemas/OpenAIFunctionParameters" }
            ]
          }
        },
        "required": ["name", "parameters"]
      },
      "CreateAssistantDTO": {
        "type": "object",
        "properties": {
          "model": {
            "type": "string",
            "description": "This is the OpenAI model that will be used.",
            "enum": ["gpt-4", "gpt-3.5-turbo"]
          },
          "voice": {
            "type": "string",
            "description": "This is the voice that will be used.\n\nPro Voices: `*-11labs`, `*-playht`\n\nBasic Voices: `*-rimeai`",
            "enum": [
              "jennifer-playht",
              "melissa-playht",
              "will-playht",
              "chris-playht",
              "matt-playht",
              "jack-playht",
              "ruby-playht",
              "davis-playht",
              "donna-playht",
              "michael-playht",
              "burt-11labs",
              "andrea-11labs",
              "phillip-11labs",
              "steve-11labs",
              "joseph-11labs",
              "myra-11labs",
              "paula-11labs",
              "ryan-11labs",
              "drew-11labs",
              "paul-11labs",
              "mrb-11labs",
              "matilda-11labs",
              "kai-rimeai",
              "zion-rimeai",
              "xavier-rimeai",
              "marty-rimeai",
              "hudson-rimeai",
              "savannah-rimeai",
              "colette-rimeai",
              "daphne-rimeai",
              "aurora-rimeai",
              "nova-rimeai",
              "apollo-beta",
              "orion-beta",
              "aurora-beta",
              "asteria-beta",
              "stella-beta",
              "artemis-beta",
              "andromeda-beta",
              "atlas-beta"
            ]
          },
          "language": {
            "type": "string",
            "description": "This sets the spoken language of the user. The assistant will do its best to respond in the same language.\nWhen using a language other than `en-*`, only `*-11labs` voices will pronounce the words correctly. There will also be ~1sec of additional latency.",
            "enum": [
              "en",
              "en-US",
              "en-AU",
              "en-GB",
              "en-NZ",
              "en-IN",
              "fr",
              "fr-CA",
              "de",
              "hi",
              "hi-Latn",
              "pt",
              "pt-BR",
              "es",
              "es-419"
            ]
          },
          "name": {
            "type": "string",
            "description": "This is the name of the assistant. This is just for your own reference.",
            "maxLength": 100
          },
          "context": {
            "type": "string",
            "description": "This sets the objective and understanding for the assistant."
          },
          "functions": {
            "description": "These are the functions that the assistant can execute during the call.",
            "type": "array",
            "items": { "$ref": "#/components/schemas/OpenAIFunction" }
          },
          "callbackUrl": {
            "type": "string",
            "description": "This is the URL Vapi will send GET / POST requests for retrieving context, function calling, and end-of-call reports.\n\nAll requests will be sent with the `call` object among other things relevant to that callback. You can find more details in the Function Calling documentation."
          },
          "customLlmUrl": {
            "type": "string",
            "description": "If you are using a custom LLM, this is the URL Vapi will use instead of hitting OpenAI.\n\nA POST request will be sent with an array of messages, and the response should be like so:\n\n```\n{ message: \"Oh hey! How are...\" }\n```"
          },
          "forwardingPhoneNumber": {
            "type": "string",
            "description": "This is the number to forward to if assistant runs into issues."
          },
          "firstMessage": {
            "type": "string",
            "description": "This is the first message that the assistant will say.\n\nIf unspecified, it will wait for the user to speak.",
            "maxLength": 400
          },
          "voicemailMessage": {
            "type": "string",
            "description": "This is the message that the assistant will say if the call is forwarded to voicemail.\n\nIf unspecified, it will hang up.",
            "maxLength": 400
          },
          "interruptionsEnabled": {
            "type": "boolean",
            "description": "This sets whether the user can interrupt the assistant while it's speaking. Defaults to true."
          },
          "recordingEnabled": {
            "type": "boolean",
            "description": "This sets whether the assistant's calls are recorded. Defaults to true."
          },
          "endCallFunctionEnabled": {
            "type": "boolean",
            "description": "This sets whether the assistant will be able to hang up the call. Defaults to false."
          },
          "fillersEnabled": {
            "type": "boolean",
            "description": "This sets whether the assistant will use fillers like Well..., Okay cool..., etc. Defaults to true when using gpt-4. Else, defaults to false."
          }
        }
      },
      "CreateCustomerDTO": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "This is the number of the customer."
          },
          "name": {
            "type": "string",
            "description": "This is the name of the customer. This is just for your own reference.",
            "maxLength": 40
          }
        }
      },
      "ImportTwilioPhoneNumberDTO": {
        "type": "object",
        "properties": {
          "twilioPhoneNumber": {
            "type": "string",
            "description": "These are the digits of the phone number you own on your Twilio."
          },
          "twilioAccountSid": {
            "type": "string",
            "description": "This is your Twilio Account SID that will be used to handle this phone number."
          },
          "twilioAuthToken": {
            "type": "string",
            "description": "This is the Twilio Auth Token that will be used to handle this phone number."
          },
          "name": {
            "type": "string",
            "description": "This is the name of the phone number. This is just for your own reference.",
            "maxLength": 40
          },
          "assistantId": {
            "type": "string",
            "description": "This is the assistant that will be used for incoming calls to this phone number.\n\nIf this is not set, then the phone number will not handle incoming calls."
          }
        },
        "required": ["twilioPhoneNumber", "twilioAccountSid", "twilioAuthToken"]
      },
      "Call": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["inboundPhoneCall", "outboundPhoneCall", "webCall"]
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the call."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this call belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the call was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the call was last updated."
          },
          "startedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the call was started."
          },
          "endedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the call was ended."
          },
          "cost": {
            "type": "number",
            "description": "This is the cost of the call in USD."
          },
          "transcript": {
            "type": "string",
            "description": "This is the transcript of the call."
          },
          "recordingUrl": {
            "type": "string",
            "description": "This is the URL of the recording of the call."
          },
          "summary": {
            "type": "string",
            "description": "This is the summary of the call."
          },
          "twilioCallSid": {
            "type": "string",
            "description": "This is the callSid of the phone call.\n\nOnly relevant for `outboundPhoneCall` and `inboundPhoneCall` type."
          },
          "twilioCallStatus": {
            "type": "string",
            "description": "This is the current status of the call.\n\nOnly relevant for `outboundPhoneCall` and `inboundPhoneCall` type."
          },
          "webCallUrl": {
            "type": "string",
            "description": "This is the URL of the call that the assistant will join.\n\nOnly relevant for `webCall` type."
          },
          "error": {
            "type": "string",
            "description": "This is set if the call experienced an error."
          },
          "assistantId": {
            "type": "string",
            "description": "This is the assistant that will be used for the call. To use a transient assistant, use `assistant` instead."
          },
          "assistant": {
            "description": "This is the assistant that will be used for the call. To use an existing assistant, use `assistantId` instead.",
            "allOf": [{ "$ref": "#/components/schemas/CreateAssistantDTO" }]
          },
          "customerId": {
            "type": "string",
            "description": "This is the customer that will be called. To call a transient customer , use `customer` instead.\n\nOnly relevant for `outboundPhoneCall` and `inboundPhoneCall` type."
          },
          "customer": {
            "description": "This is the customer that will be called. To call an existing customer, use `customerId` instead.\n\nOnly relevant for `outboundPhoneCall` and `inboundPhoneCall` type.",
            "allOf": [{ "$ref": "#/components/schemas/CreateCustomerDTO" }]
          },
          "phoneNumberId": {
            "type": "string",
            "description": "This is the phone number that will be used for the call. To use a transient number, use `phoneNumber` instead.\n\nOnly relevant for `outboundPhoneCall` and `inboundPhoneCall` type."
          },
          "phoneNumber": {
            "description": "This is the phone number that will be used for the call. To use an existing number, use `phoneNumberId` instead.\n\nOnly relevant for `outboundPhoneCall` and `inboundPhoneCall` type.",
            "allOf": [
              { "$ref": "#/components/schemas/ImportTwilioPhoneNumberDTO" }
            ]
          }
        },
        "required": ["id", "orgId", "createdAt", "updatedAt"]
      },
      "CreateOutboundCallDTO": {
        "type": "object",
        "properties": {
          "customerPhoneNumber": {
            "type": "string",
            "deprecated": true,
            "description": "Use `customer` instead."
          },
          "assistantId": {
            "type": "string",
            "description": "This is the assistant that will be used for the call. To use a transient assistant, use `assistant` instead."
          },
          "assistant": {
            "description": "This is the assistant that will be used for the call. To use an existing assistant, use `assistantId` instead.",
            "allOf": [{ "$ref": "#/components/schemas/CreateAssistantDTO" }]
          },
          "customerId": {
            "type": "string",
            "description": "This is the customer that will be called. To call a transient customer , use `customer` instead.\n\nOnly relevant for `outboundPhoneCall` and `inboundPhoneCall` type."
          },
          "customer": {
            "description": "This is the customer that will be called. To call an existing customer, use `customerId` instead.\n\nOnly relevant for `outboundPhoneCall` and `inboundPhoneCall` type.",
            "allOf": [{ "$ref": "#/components/schemas/CreateCustomerDTO" }]
          },
          "phoneNumberId": {
            "type": "string",
            "description": "This is the phone number that will be used for the call. To use a transient number, use `phoneNumber` instead.\n\nOnly relevant for `outboundPhoneCall` and `inboundPhoneCall` type."
          },
          "phoneNumber": {
            "description": "This is the phone number that will be used for the call. To use an existing number, use `phoneNumberId` instead.\n\nOnly relevant for `outboundPhoneCall` and `inboundPhoneCall` type.",
            "allOf": [
              { "$ref": "#/components/schemas/ImportTwilioPhoneNumberDTO" }
            ]
          }
        }
      },
      "CreateWebCallDTO": {
        "type": "object",
        "properties": {
          "assistantId": {
            "type": "string",
            "description": "This is the assistant that will be used for the call. To use a transient assistant, use `assistant` instead."
          },
          "assistant": {
            "description": "This is the assistant that will be used for the call. To use an existing assistant, use `assistantId` instead.",
            "allOf": [{ "$ref": "#/components/schemas/CreateAssistantDTO" }]
          }
        }
      },
      "Assistant": {
        "type": "object",
        "properties": {
          "model": {
            "type": "string",
            "description": "This is the OpenAI model that will be used.",
            "enum": ["gpt-4", "gpt-3.5-turbo"]
          },
          "voice": {
            "type": "string",
            "description": "This is the voice that will be used.\n\nPro Voices: `*-11labs`, `*-playht`\n\nBasic Voices: `*-rimeai`",
            "enum": [
              "jennifer-playht",
              "melissa-playht",
              "will-playht",
              "chris-playht",
              "matt-playht",
              "jack-playht",
              "ruby-playht",
              "davis-playht",
              "donna-playht",
              "michael-playht",
              "burt-11labs",
              "andrea-11labs",
              "phillip-11labs",
              "steve-11labs",
              "joseph-11labs",
              "myra-11labs",
              "paula-11labs",
              "ryan-11labs",
              "drew-11labs",
              "paul-11labs",
              "mrb-11labs",
              "matilda-11labs",
              "kai-rimeai",
              "zion-rimeai",
              "xavier-rimeai",
              "marty-rimeai",
              "hudson-rimeai",
              "savannah-rimeai",
              "colette-rimeai",
              "daphne-rimeai",
              "aurora-rimeai",
              "nova-rimeai",
              "apollo-beta",
              "orion-beta",
              "aurora-beta",
              "asteria-beta",
              "stella-beta",
              "artemis-beta",
              "andromeda-beta",
              "atlas-beta"
            ]
          },
          "language": {
            "type": "string",
            "description": "This sets the spoken language of the user. The assistant will do its best to respond in the same language.\nWhen using a language other than `en-*`, only `*-11labs` voices will pronounce the words correctly. There will also be ~1sec of additional latency.",
            "enum": [
              "en",
              "en-US",
              "en-AU",
              "en-GB",
              "en-NZ",
              "en-IN",
              "fr",
              "fr-CA",
              "de",
              "hi",
              "hi-Latn",
              "pt",
              "pt-BR",
              "es",
              "es-419"
            ]
          },
          "name": {
            "type": "string",
            "description": "This is the name of the assistant. This is just for your own reference.",
            "maxLength": 100
          },
          "context": {
            "type": "string",
            "description": "This sets the objective and understanding for the assistant."
          },
          "functions": {
            "description": "These are the functions that the assistant can execute during the call.",
            "type": "array",
            "items": { "$ref": "#/components/schemas/OpenAIFunction" }
          },
          "callbackUrl": {
            "type": "string",
            "description": "This is the URL Vapi will send GET / POST requests for retrieving context, function calling, and end-of-call reports.\n\nAll requests will be sent with the `call` object among other things relevant to that callback. You can find more details in the Function Calling documentation."
          },
          "customLlmUrl": {
            "type": "string",
            "description": "If you are using a custom LLM, this is the URL Vapi will use instead of hitting OpenAI.\n\nA POST request will be sent with an array of messages, and the response should be like so:\n\n```\n{ message: \"Oh hey! How are...\" }\n```"
          },
          "forwardingPhoneNumber": {
            "type": "string",
            "description": "This is the number to forward to if assistant runs into issues."
          },
          "firstMessage": {
            "type": "string",
            "description": "This is the first message that the assistant will say.\n\nIf unspecified, it will wait for the user to speak.",
            "maxLength": 400
          },
          "voicemailMessage": {
            "type": "string",
            "description": "This is the message that the assistant will say if the call is forwarded to voicemail.\n\nIf unspecified, it will hang up.",
            "maxLength": 400
          },
          "interruptionsEnabled": {
            "type": "boolean",
            "description": "This sets whether the user can interrupt the assistant while it's speaking. Defaults to true."
          },
          "recordingEnabled": {
            "type": "boolean",
            "description": "This sets whether the assistant's calls are recorded. Defaults to true."
          },
          "endCallFunctionEnabled": {
            "type": "boolean",
            "description": "This sets whether the assistant will be able to hang up the call. Defaults to false."
          },
          "fillersEnabled": {
            "type": "boolean",
            "description": "This sets whether the assistant will use fillers like Well..., Okay cool..., etc. Defaults to true when using gpt-4. Else, defaults to false."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the assistant."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this assistant belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          }
        },
        "required": ["id", "orgId", "createdAt", "updatedAt"]
      },
      "UpdateAssistantDTO": {
        "type": "object",
        "properties": {
          "model": {
            "type": "string",
            "description": "This is the OpenAI model that will be used.",
            "enum": ["gpt-4", "gpt-3.5-turbo"]
          },
          "voice": {
            "type": "string",
            "description": "This is the voice that will be used.\n\nPro Voices: `*-11labs`, `*-playht`\n\nBasic Voices: `*-rimeai`",
            "enum": [
              "jennifer-playht",
              "melissa-playht",
              "will-playht",
              "chris-playht",
              "matt-playht",
              "jack-playht",
              "ruby-playht",
              "davis-playht",
              "donna-playht",
              "michael-playht",
              "burt-11labs",
              "andrea-11labs",
              "phillip-11labs",
              "steve-11labs",
              "joseph-11labs",
              "myra-11labs",
              "paula-11labs",
              "ryan-11labs",
              "drew-11labs",
              "paul-11labs",
              "mrb-11labs",
              "matilda-11labs",
              "kai-rimeai",
              "zion-rimeai",
              "xavier-rimeai",
              "marty-rimeai",
              "hudson-rimeai",
              "savannah-rimeai",
              "colette-rimeai",
              "daphne-rimeai",
              "aurora-rimeai",
              "nova-rimeai",
              "apollo-beta",
              "orion-beta",
              "aurora-beta",
              "asteria-beta",
              "stella-beta",
              "artemis-beta",
              "andromeda-beta",
              "atlas-beta"
            ]
          },
          "language": {
            "type": "string",
            "description": "This sets the spoken language of the user. The assistant will do its best to respond in the same language.\nWhen using a language other than `en-*`, only `*-11labs` voices will pronounce the words correctly. There will also be ~1sec of additional latency.",
            "enum": [
              "en",
              "en-US",
              "en-AU",
              "en-GB",
              "en-NZ",
              "en-IN",
              "fr",
              "fr-CA",
              "de",
              "hi",
              "hi-Latn",
              "pt",
              "pt-BR",
              "es",
              "es-419"
            ]
          },
          "name": {
            "type": "string",
            "description": "This is the name of the assistant. This is just for your own reference.",
            "maxLength": 100
          },
          "context": {
            "type": "string",
            "description": "This sets the objective and understanding for the assistant."
          },
          "functions": {
            "description": "These are the functions that the assistant can execute during the call.",
            "type": "array",
            "items": { "$ref": "#/components/schemas/OpenAIFunction" }
          },
          "callbackUrl": {
            "type": "string",
            "description": "This is the URL Vapi will send GET / POST requests for retrieving context, function calling, and end-of-call reports.\n\nAll requests will be sent with the `call` object among other things relevant to that callback. You can find more details in the Function Calling documentation."
          },
          "customLlmUrl": {
            "type": "string",
            "description": "If you are using a custom LLM, this is the URL Vapi will use instead of hitting OpenAI.\n\nA POST request will be sent with an array of messages, and the response should be like so:\n\n```\n{ message: \"Oh hey! How are...\" }\n```"
          },
          "forwardingPhoneNumber": {
            "type": "string",
            "description": "This is the number to forward to if assistant runs into issues."
          },
          "firstMessage": {
            "type": "string",
            "description": "This is the first message that the assistant will say.\n\nIf unspecified, it will wait for the user to speak.",
            "maxLength": 400
          },
          "voicemailMessage": {
            "type": "string",
            "description": "This is the message that the assistant will say if the call is forwarded to voicemail.\n\nIf unspecified, it will hang up.",
            "maxLength": 400
          },
          "interruptionsEnabled": {
            "type": "boolean",
            "description": "This sets whether the user can interrupt the assistant while it's speaking. Defaults to true."
          },
          "recordingEnabled": {
            "type": "boolean",
            "description": "This sets whether the assistant's calls are recorded. Defaults to true."
          },
          "endCallFunctionEnabled": {
            "type": "boolean",
            "description": "This sets whether the assistant will be able to hang up the call. Defaults to false."
          },
          "fillersEnabled": {
            "type": "boolean",
            "description": "This sets whether the assistant will use fillers like Well..., Okay cool..., etc. Defaults to true when using gpt-4. Else, defaults to false."
          }
        }
      },
      "BuyPhoneNumberDTO": {
        "type": "object",
        "properties": {
          "areaCode": {
            "type": "string",
            "description": "This is the area code of the phone number to purchase.",
            "minLength": 3,
            "maxLength": 3
          },
          "name": {
            "type": "string",
            "description": "This is the name of the phone number. This is just for your own reference.",
            "maxLength": 40
          },
          "assistantId": {
            "type": "string",
            "description": "This is the assistant that will be used for incoming calls to this phone number.\n\nIf this is not set, then the phone number will not handle incoming calls."
          }
        },
        "required": ["areaCode"]
      },
      "PhoneNumber": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the phone number."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this phone number belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the phone number was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the phone number was last updated."
          },
          "stripeSubscriptionId": {
            "type": "string",
            "description": "This is the subscription for the phone number."
          },
          "stripeSubscriptionStatus": {
            "type": "string",
            "description": "This is the subscription's status."
          },
          "stripeSubscriptionCurrentPeriodStart": {
            "format": "date-time",
            "type": "string",
            "description": "This is the subscription's current period start."
          },
          "number": {
            "type": "string",
            "description": "These are the digits of the phone number."
          },
          "twilioAccountSid": {
            "type": "string",
            "description": "This is the Twilio Account SID for the phone number.\n\nThis is for numbers not bought on Vapi."
          },
          "twilioAuthToken": {
            "type": "string",
            "description": "This is the Twilio Auth Token for the phone number.\n\nThis is for numbers not bought on Vapi."
          },
          "name": {
            "type": "string",
            "description": "This is the name of the phone number. This is just for your own reference.",
            "maxLength": 40
          },
          "assistantId": {
            "type": "string",
            "description": "This is the assistant that will be used for incoming calls to this phone number.\n\nIf this is not set, then the phone number will not handle incoming calls."
          }
        },
        "required": ["id", "orgId", "createdAt", "updatedAt", "number"]
      },
      "UpdatePhoneNumberDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "This is the name of the phone number. This is just for your own reference.",
            "maxLength": 40
          },
          "assistantId": {
            "type": "string",
            "description": "This is the assistant that will be used for incoming calls to this phone number.\n\nIf this is not set, then the phone number will not handle incoming calls."
          }
        }
      }
    }
  }
}
